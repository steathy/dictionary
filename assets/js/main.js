// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var Delegate, Dictionary, Key, Loading, dictionary, loading, separator, settings, title;

  Key = "AIzaSyDqVYORLCUXxSv7zneerIgC2UYMnxvPeqQ";

  Dictionary = (function() {
    Dictionary.prototype.createElement = function(tag, attributes, children) {
      var child, element, name, value, _i, _len;
      element = document.createElement(tag);
      for (name in attributes) {
        value = attributes[name];
        if (value != null) {
          element.setAttribute(name, value);
        }
      }
      if (children instanceof Array) {
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          child = children[_i];
          element.appendChild(child);
        }
      } else if ("[object String]" === Object.prototype.toString.call(children)) {
        element.innerHTML += children;
      }
      return element;
    };

    Dictionary.prototype.createTextNode = function(text) {
      return document.createTextNode(text);
    };

    Dictionary.prototype.toHTMLElement = function() {
      var group, result, _i, _len, _ref;
      result = this.createElement("div");
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        group = _ref[_i];
        result.appendChild(this.createElement("div", {
          "class": "displayName",
          "data-type": group.dataType
        }, group.groupResult.displayName));
        result.appendChild(this.createElement("div", {
          "class": "dictionary",
          "data-word": group.dictionary.word,
          "data-dictionary-type": group.dictionary.dictionaryType
        }, (function(_this) {
          return function(definitionsData) {
            var definitionData, definitions, _j, _len1;
            definitions = [];
            for (_j = 0, _len1 = definitionsData.length; _j < _len1; _j++) {
              definitionData = definitionsData[_j];
              definitions.push(_this.createElement("div", {
                "class": "definition"
              }, (function() {
                var definition, i, _k, _len2, _ref1;
                definition = [];
                _ref1 = ["pos", "phoneticText"];
                for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                  i = _ref1[_k];
                  if (definitionData[i]) {
                    definition.push(_this.createElement("span", {
                      "class": i
                    }, definitionData[i]));
                    definition.push(_this.createTextNode(" "));
                  }
                }
                if (definitionData.wordForms) {
                  definition.push(_this.createElement("ul", {
                    "class": "wordForms"
                  }, (function(wordFormsData) {
                    var wordFormData, wordForms, _l, _len3;
                    wordForms = [];
                    for (_l = 0, _len3 = wordFormsData.length; _l < _len3; _l++) {
                      wordFormData = wordFormsData[_l];
                      wordForms.push(_this.createElement("li", {
                        "class": "wordForm"
                      }, [
                        _this.createElement("span", {
                          "class": "word"
                        }, wordFormData.word), _this.createTextNode(" "), _this.createElement("span", {
                          "class": "form"
                        }, wordFormData.form)
                      ]));
                    }
                    return wordForms;
                  })(definitionData.wordForms)));
                }
                if (definitionData.meanings) {
                  definition.push(_this.createElement("ol", {
                    "class": "meanings"
                  }, (function(meaningsData) {
                    var meaning, meaningData, meanings, _l, _len3;
                    meanings = [];
                    for (_l = 0, _len3 = meaningsData.length; _l < _len3; _l++) {
                      meaningData = meaningsData[_l];
                      meaning = _this.createElement("li", {
                        "class": "meaning"
                      });
                      if (meaningData.meaning) {
                        meaning.appendChild(_this.createElement("div", {
                          "class": "meaning"
                        }, meaningData.meaning));
                      }
                      if (meaningData.examples) {
                        meaning.appendChild(_this.createElement("ul", {
                          "class": "examples"
                        }, (function(examplesData) {
                          var exampleData, examples, _len4, _m;
                          examples = [];
                          for (_m = 0, _len4 = examplesData.length; _m < _len4; _m++) {
                            exampleData = examplesData[_m];
                            examples.push(_this.createElement("li", {
                              "class": "example"
                            }, exampleData));
                          }
                          return examples;
                        })(meaningData.examples)));
                      }
                      if (meaningData.submeanings) {
                        meaning.appendChild(_this.createElement("ol", {
                          "class": "submeanings"
                        }, (function(submeaningsData) {
                          var submeaning, submeaningData, submeanings, _len4, _m;
                          submeanings = [];
                          for (_m = 0, _len4 = submeaningsData.length; _m < _len4; _m++) {
                            submeaningData = submeaningsData[_m];
                            submeaning = _this.createElement("li", {
                              "class": "submeaning"
                            });
                            if (submeaningData.meaning) {
                              submeaning.appendChild(_this.createElement("div", {
                                "class": "submeaning"
                              }, submeaningData.meaning));
                            }
                            if (submeaningData.examples) {
                              submeaning.appendChild(_this.createElement("ul", {
                                "class": "examples"
                              }, (function(examplesData) {
                                var exampleData, examples, _len5, _n;
                                examples = [];
                                for (_n = 0, _len5 = examplesData.length; _n < _len5; _n++) {
                                  exampleData = examplesData[_n];
                                  examples.push(_this.createElement("li", {
                                    "class": "example"
                                  }, exampleData));
                                }
                                return examples;
                              })(submeaningData.examples)));
                            }
                            if (submeaningData.synonyms) {
                              submeaning.appendChild(_this.createElement("ul", {
                                "class": "synonyms"
                              }, (function(synonymsData) {
                                var synonymData, synonyms, _len5, _n, _ref2;
                                synonyms = [];
                                for (_n = 0, _len5 = synonymsData.length; _n < _len5; _n++) {
                                  synonymData = synonymsData[_n];
                                  synonyms.push(_this.createElement("li", {
                                    "class": "nym"
                                  }, [
                                    _this.createElement("a", {
                                      "class": "nym",
                                      href: ((_ref2 = synonymData.nymResult) != null ? _ref2.query : void 0) ? "#" + synonymData.nymResult.query : null
                                    }, synonymData.nym)
                                  ]));
                                }
                                return synonyms;
                              })(submeaningData.synonyms)));
                            }
                            if (submeaningData.antonyms) {
                              submeaning.appendChild(_this.createElement("ul", {
                                "class": "antonyms"
                              }, (function(antonymsData) {
                                var antonymData, antonyms, _len5, _n, _ref2;
                                antonyms = [];
                                for (_n = 0, _len5 = antonymsData.length; _n < _len5; _n++) {
                                  antonymData = antonymsData[_n];
                                  antonyms.push(_this.createElement("li", {
                                    "class": "nym"
                                  }, [
                                    _this.createElement("a", {
                                      "class": "nym",
                                      href: ((_ref2 = antonymData.nymResult) != null ? _ref2.query : void 0) ? "#" + antonymData.nymResult.query : null
                                    }, antonymData.nym)
                                  ]));
                                }
                                return antonyms;
                              })(submeaningData.antonyms)));
                            }
                            submeanings.push(submeaning);
                          }
                          return submeanings;
                        })(meaningData.submeanings)));
                      }
                      if (meaningData.synonyms) {
                        meaning.appendChild(_this.createElement("ul", {
                          "class": "synonyms"
                        }, (function(synonymsData) {
                          var synonymData, synonyms, _len4, _m, _ref2;
                          synonyms = [];
                          for (_m = 0, _len4 = synonymsData.length; _m < _len4; _m++) {
                            synonymData = synonymsData[_m];
                            synonyms.push(_this.createElement("li", {
                              "class": "nym"
                            }, [
                              _this.createElement("a", {
                                "class": "nym",
                                href: ((_ref2 = synonymData.nymResult) != null ? _ref2.query : void 0) ? "#" + synonymData.nymResult.query : null
                              }, synonymData.nym)
                            ]));
                          }
                          return synonyms;
                        })(meaningData.synonyms)));
                      }
                      if (meaningData.antonyms) {
                        meaning.appendChild(_this.createElement("ul", {
                          "class": "antonyms"
                        }, (function(antonymsData) {
                          var antonymData, antonyms, _len4, _m, _ref2;
                          antonyms = [];
                          for (_m = 0, _len4 = antonymsData.length; _m < _len4; _m++) {
                            antonymData = antonymsData[_m];
                            antonyms.push(_this.createElement("li", {
                              "class": "nym"
                            }, [
                              _this.createElement("a", {
                                "class": "nym",
                                href: ((_ref2 = antonymData.nymResult) != null ? _ref2.query : void 0) ? "#" + antonymData.nymResult.query : null
                              }, antonymData.nym)
                            ]));
                          }
                          return antonyms;
                        })(meaningData.antonyms)));
                      }
                      meanings.push(meaning);
                    }
                    return meanings;
                  })(definitionData.meanings)));
                }
                return definition;
              })()));
            }
            return definitions;
          };
        })(this)(group.dictionary.definitionData)));
      }
      return result;
    };

    function Dictionary(data) {
      this.data = data != null ? data : {};
    }

    return Dictionary;

  })();

  Loading = (function() {
    function Loading() {}

    Loading.prototype.start = function() {
      if (this.Interval != null) {
        clearInterval(this.Interval);
      }
      this.Interval = setInterval(this.load, 250);
      $("#loading").show();
      return this;
    };

    Loading.prototype.load = function() {
      var active, next;
      active = $("#loading").find(".icon-circle");
      next = active.next();
      if (!next.length) {
        next = $($("#loading").find("i")[0]);
      }
      active.toggleClass("icon-circle").toggleClass("icon-circle-blank");
      next.toggleClass("icon-circle").toggleClass("icon-circle-blank");
    };

    Loading.prototype.stop = function() {
      $("#loading").hide();
      clearInterval(this.Interval);
      return this;
    };

    return Loading;

  })();

  Delegate = (function() {
    Delegate.prototype.language = "en";

    Delegate.prototype.languages = {
      "zh-hans": "Chinese (Simplified)",
      "zh-hant": "Chinese (Traditional)",
      "cs": "Czech",
      "nl": "Dutch",
      "en": "English",
      "fr": "French",
      "de": "German",
      "it": "Italian",
      "ko": "Korean",
      "pt": "Portuguese",
      "ru": "Russian",
      "es": "Spanish"
    };

    Delegate.prototype.onChangeLanguage = function() {
      console.log("onChangeLanguage");
      console.log(this.language);
    };

    Delegate.prototype.changeLanguage = function(language) {
      if (language in this.languages) {
        this.language = language;
        this.onChangeLanguage();
      }
      return this;
    };

    Delegate.prototype.onSubmit = function() {
      console.log("onSubmit");
      console.log(this.query);
    };

    Delegate.prototype.submit = function(query) {
      var nonce;
      this.query = query;
      if (this.onSubmit()) {
        nonce = ++this.nonce;
        if (this.timeout) {
          clearTimeout(this.timeout);
        }
        this.timeout = setTimeout((function(_this) {
          return function() {
            return _this.onError("Timeout");
          };
        })(this), 3000);
        $.ajax({
          url: "https://www.googleapis.com/scribe/v1/research",
          dataType: "jsonp",
          data: {
            key: Key,
            dataset: "dictionary",
            dictionaryLanguage: this.language,
            query: this.query
          },
          success: (function(_this) {
            return function(json) {
              if (nonce === _this.nonce && _this.timeout) {
                clearTimeout(_this.timeout);
              }
              if (nonce === _this.nonce && json.responseHandled === true) {
                return _this.onData(json.data);
              }
            };
          })(this)
        });
      }
    };

    Delegate.prototype.onData = function(data) {
      console.log("onData");
      console.log(data);
    };

    Delegate.prototype.onLoad = function() {
      console.log("onLoad");
    };

    Delegate.prototype.onError = function(error) {
      console.log("onError");
      console.log(error);
    };

    function Delegate(options) {
      var key, value;
      this.nonce = 0;
      for (key in options) {
        value = options[key];
        this[key] = value;
      }
      this.onLoad();
    }

    return Delegate;

  })();

  if (typeof localStorage !== "undefined" && localStorage !== null) {
    settings = localStorage.getItem("dictionary.settings");
    window.onunload = function() {
      localStorage.setItem("dictionary.settings", JSON.stringify(settings));
    };
  }

  settings = settings != null ? JSON.parse(settings) : {
    language: "en",
    options: {
      examples: true,
      synonyms: true
    }
  };

  title = document.title;

  separator = ".";

  window.onhashchange = function() {
    var currentLanguage, hash, index, language, query;
    hash = decodeURIComponent(location.hash.substr(1));
    index = hash.lastIndexOf(separator);
    if (index === -1) {
      if (dictionary.query !== hash) {
        dictionary.submit(hash);
      }
    } else {
      currentLanguage = dictionary.language;
      language = hash.substr(index + 1);
      query = hash.substr(0, index);
      if (currentLanguage !== language) {
        dictionary.changeLanguage(language);
      }
      if (dictionary.query !== query || dictionary.language !== currentLanguage) {
        dictionary.submit(query);
      }
    }
  };

  loading = new Loading();

  dictionary = new Delegate({
    language: settings.language,
    onLoad: function() {},
    onChangeLanguage: function() {
      settings.language = this.language;
      if ($("#language").val() !== this.language) {
        $("#language").val(this.language);
      }
    },
    onSubmit: function() {
      $("#query").blur().val(this.query);
      location.href = "#" + this.query + separator + this.language;
      if (this.query === "") {
        $("#dictionary").hide();
        document.title = title;
        $("header").fadeIn("slow");
        return false;
      } else {
        $("header").hide();
        $("#dictionary").empty();
        loading.start();
        document.title = this.query + " « " + this.languages[this.language];
        return true;
      }
    },
    onData: function(data) {
      var option, value, _ref;
      $("#dictionary").empty().append(new Dictionary(data).toHTMLElement());
      $("#dictionary a.nym").click(function(event) {
        event.preventDefault();
        dictionary.submit($(this).attr("href").replace(/^#/, ""));
      });
      _ref = settings.options;
      for (option in _ref) {
        value = _ref[option];
        if (value === false) {
          $("#dictionary ul." + option).hide();
        }
      }
      $("#dictionary").show();
      loading.stop();
    },
    onError: function(error) {

      /*
      $("#dictionary").hide().html("""
      404. <span style="color: gray;">That's an error.</span><br>
      <br>
      Google is doing evil.<br>
      <span style="color: gray;">That's all I know.</span>
      """).fadeIn()
       */
    }
  });

  $(document).ready(function() {
    var key, lastAjaxACRequestNonce, lastSubmitNonce, nonce, option, status, value, _fn, _ref, _ref1;
    _ref = dictionary.languages;
    for (key in _ref) {
      value = _ref[key];
      option = new Option(value, key);
      if (key === dictionary.language) {
        option.selected = true;
      }
      document.getElementById("language").add(option, null);
    }
    if (location.hash) {
      window.onhashchange();
    }
    $("#language").change(function() {
      dictionary.changeLanguage($(this).val());
    });
    _ref1 = settings.options;
    _fn = function(option) {
      return $("#" + option).click(function() {
        settings.options[option] = !settings.options[option];
        $("#dictionary ul." + option).toggle();
        if (option === "synonyms") {
          $("#dictionary ul.antonyms").toggle();
        }
      });
    };
    for (option in _ref1) {
      status = _ref1[option];
      if (status) {
        $("#" + option).addClass("active");
      }
      _fn(option);
    }
    $("#toggle-options").click(function() {
      $("#options-wrapper").toggle();
    });
    nonce = 0;
    lastSubmitNonce = nonce;
    $("#submit").submit(function(event) {
      event.preventDefault();
      dictionary.submit($("#query").val());
      return lastSubmitNonce = nonce++;
    });
    lastAjaxACRequestNonce = nonce;
    $("#query").typeahead({
      source: function(query, process) {
        var ajaxACRequestNonce;
        ajaxACRequestNonce = nonce++;
        lastAjaxACRequestNonce = ajaxACRequestNonce;
        $.ajax({
          url: "//" + dictionary.language.substr(0, 2) + ".wiktionary.org/w/api.php",
          dataType: "jsonp",
          data: {
            search: query,
            action: "opensearch"
          },
          success: (function(_this) {
            return function(data) {
              if (lastSubmitNonce < ajaxACRequestNonce && ajaxACRequestNonce === lastAjaxACRequestNonce) {
                process(data[1]);
                _this.$menu.find(".active").removeClass("active");
              } else {
                process([]);
              }
            };
          })(this)
        });
      },
      updater: function(item) {
        if (item != null) {
          dictionary.submit(item);
          return item;
        } else {
          dictionary.submit(this.$element.val());
          return this.$element.val();
        }
      }
    });
  });

}).call(this);
